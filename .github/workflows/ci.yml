name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # Frontend quality checks
  frontend-quality:
    name: Frontend Quality Checks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Type check
      run: npm run typecheck
      
    - name: Lint code
      run: npm run lint
      
    - name: Check formatting
      run: npm run format:check
      
    - name: Run tests
      run: npm run test:coverage
      
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: frontend
        name: frontend-coverage

  # Backend quality checks
  backend-quality:
    name: Backend Quality Checks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup DFX
      uses: dfinity/dfx-setup@v1
      with:
        version: '0.15.0'
        
    - name: Setup Motoko
      run: |
        curl -L -o moc.gz https://github.com/dfinity/motoko/releases/latest/download/moc-linux64.gz
        gunzip moc.gz
        chmod +x moc
        sudo mv moc /usr/local/bin/
        
    - name: Check Motoko syntax
      run: |
        cd src/trustseal_backend
        moc --check main.mo
        moc --check tests/main.test.mo
        
    - name: Run Motoko tests
      run: |
        cd src/trustseal_backend
        moc -r tests/main.test.mo

  # Build verification
  build-verification:
    name: Build Verification
    runs-on: ubuntu-latest
    needs: [frontend-quality, backend-quality]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build frontend
      run: npm run build
      
    - name: Verify build artifacts
      run: |
        if [ ! -d "dist" ]; then
          echo "Build directory 'dist' not found"
          exit 1
        fi
        
        if [ ! -f "dist/index.html" ]; then
          echo "index.html not found in dist directory"
          exit 1
        fi
        
        if [ ! -f "dist/bundle.js" ]; then
          echo "bundle.js not found in dist directory"
          exit 1
        fi
        
        echo "Build verification passed"
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: frontend-build
        path: dist/
        retention-days: 7

  # Security checks
  security:
    name: Security Checks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run security audit
      run: npm audit --audit-level=moderate
      
    - name: Check for secrets
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Integration tests
  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [frontend-quality, backend-quality, build-verification]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Start demo server
      run: |
        npm run build
        timeout 30s npm run demo &
        sleep 10
        
    - name: Run integration tests
      run: |
        # Basic health check
        curl -f http://localhost:3001/api/health || exit 1
        
        # Test API endpoints
        curl -f http://localhost:3001/api/admin/stats || exit 1
        curl -f http://localhost:3001/api/issuer/credentials || exit 1
        
        echo "Integration tests passed"

  # Deployment (only on main branch)
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [frontend-quality, backend-quality, build-verification, security, integration]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup DFX
      uses: dfinity/dfx-setup@v1
      with:
        version: '0.15.0'
        
    - name: Deploy to IC
      run: |
        # Set IC network identity
        dfx identity use default
        
        # Deploy canisters
        dfx deploy --network ic
        
    - name: Verify deployment
      run: |
        # Check if canisters are running
        dfx canister status trustseal_backend --network ic
        dfx canister status trustseal_frontend --network ic

  # Performance monitoring
  performance:
    name: Performance Monitoring
    runs-on: ubuntu-latest
    needs: [build-verification]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build and analyze bundle
      run: |
        npm run build
        
        # Check bundle size
        BUNDLE_SIZE=$(stat -c%s dist/bundle.js)
        echo "Bundle size: $BUNDLE_SIZE bytes"
        
        # Warn if bundle is too large (>1MB)
        if [ $BUNDLE_SIZE -gt 1048576 ]; then
          echo "⚠️  Bundle size exceeds 1MB threshold"
          exit 1
        fi
        
        echo "✅ Bundle size is within acceptable limits"
        
    - name: Lighthouse CI
      uses: treosh/lighthouse-ci-action@v10
      with:
        configPath: './.lighthouserc.json'
        uploadArtifacts: true
        temporaryPublicStorage: true

# Cache configuration
cache:
  paths:
    - '~/.npm'
    - 'node_modules/**/*'
    - 'dist/**/*'